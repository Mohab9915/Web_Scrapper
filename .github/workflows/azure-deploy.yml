name: Deploy to Azure Container Apps

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  AZURE_RESOURCE_GROUP: scrapemaster-rg
  AZURE_LOCATION: eastus
  BACKEND_IMAGE_NAME: scrapemaster/backend
  FRONTEND_IMAGE_NAME: scrapemaster/frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'prod' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get existing infrastructure
      id: infrastructure
      run: |
        # Use existing registry and environment to skip infrastructure deployment
        REGISTRY_NAME=$(az acr list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[0].name" --output tsv)
        REGISTRY_LOGIN_SERVER=$(az acr list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[0].loginServer" --output tsv)
        CONTAINER_APP_ENV_ID=$(az containerapp env list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[0].id" --output tsv)

        echo "Using existing infrastructure:"
        echo "Registry: $REGISTRY_NAME"
        echo "Login Server: $REGISTRY_LOGIN_SERVER"
        echo "Environment ID: $CONTAINER_APP_ENV_ID"

        echo "login_server=$REGISTRY_LOGIN_SERVER" >> $GITHUB_OUTPUT
        echo "registry_name=$REGISTRY_NAME" >> $GITHUB_OUTPUT
        echo "container_app_env_id=$CONTAINER_APP_ENV_ID" >> $GITHUB_OUTPUT

    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ steps.infrastructure.outputs.registry_name }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: |
          ${{ steps.infrastructure.outputs.login_server }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          ${{ steps.infrastructure.outputs.login_server }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        build-args: |
          REACT_APP_API_URL=https://scrapemaster-backend-prod.whitemeadow-57a6711f.eastus.azurecontainerapps.io
          REACT_APP_AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}
          REACT_APP_AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }}
        tags: |
          ${{ steps.infrastructure.outputs.login_server }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          ${{ steps.infrastructure.outputs.login_server }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy container apps (Phase 2)
      id: apps
      run: |
        APPS_DEPLOYMENT_NAME="scrapemaster-apps-$(date +%Y%m%d-%H%M%S)"

        echo "Deploying container apps with built images..."
        az deployment group create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file azure-container-apps-only.bicep \
          --name "$APPS_DEPLOYMENT_NAME" \
          --parameters \
            namePrefix=scrapemaster \
            environment=${{ github.event.inputs.environment || 'prod' }} \
            containerRegistryLoginServer="${{ steps.infrastructure.outputs.login_server }}" \
            containerRegistryName="${{ steps.infrastructure.outputs.registry_name }}" \
            containerAppEnvironmentId="${{ steps.infrastructure.outputs.container_app_env_id }}" \
            backendImageTag="${{ github.sha }}" \
            frontendImageTag="${{ github.sha }}" \
            supabaseUrl="${{ secrets.SUPABASE_URL }}" \
            supabaseKey="${{ secrets.SUPABASE_KEY }}" \
            azureOpenAIApiKey="${{ secrets.AZURE_OPENAI_API_KEY }}" \
            azureOpenAIEndpoint="${{ secrets.AZURE_OPENAI_ENDPOINT }}"

        echo "apps_deployment_name=$APPS_DEPLOYMENT_NAME" >> $GITHUB_OUTPUT

    - name: Get deployment URLs
      id: urls
      run: |
        # Get URLs from container apps deployment outputs
        BACKEND_URL=$(az deployment group show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ steps.apps.outputs.apps_deployment_name }} \
          --query "properties.outputs.backendUrl.value" \
          --output tsv)

        FRONTEND_URL=$(az deployment group show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ steps.apps.outputs.apps_deployment_name }} \
          --query "properties.outputs.frontendUrl.value" \
          --output tsv)

        echo "backend_url=$BACKEND_URL" >> $GITHUB_OUTPUT
        echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT

    - name: Run health checks
      run: |
        echo "Waiting for services to be ready..."
        sleep 20

        # Check backend health with retry
        for i in {1..6}; do
          if curl -f ${{ steps.urls.outputs.backend_url }}/health; then
            echo "✅ Backend health check passed"
            break
          else
            echo "Backend not ready, attempt $i/6..."
            sleep 10
          fi
        done

        # Check frontend with retry
        for i in {1..3}; do
          if curl -f ${{ steps.urls.outputs.frontend_url }}; then
            echo "✅ Frontend health check passed"
            break
          else
            echo "Frontend not ready, attempt $i/3..."
            sleep 5
          fi
        done

    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment || 'prod' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Application URLs" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend:** ${{ steps.urls.outputs.frontend_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend API:** ${{ steps.urls.outputs.backend_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **API Documentation:** ${{ steps.urls.outputs.backend_url }}/docs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Monitoring" >> $GITHUB_STEP_SUMMARY
        echo "- **Azure Portal:** [View Resources](https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Application Insights:** [View Metrics](https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Insights/components/scrapemaster-insights-${{ github.event.inputs.environment || 'prod' }})" >> $GITHUB_STEP_SUMMARY

  cleanup-old-images:
    runs-on: ubuntu-latest
    if: always()  # Run cleanup regardless of main job status
    
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Cleanup old container images
      run: |
        # Keep only the latest 5 images for each repository
        az acr repository show-tags \
          --name ${{ env.CONTAINER_REGISTRY_NAME }} \
          --repository ${{ env.BACKEND_IMAGE_NAME }} \
          --orderby time_desc \
          --output tsv | tail -n +6 | while read tag; do
          az acr repository delete \
            --name ${{ env.CONTAINER_REGISTRY_NAME }} \
            --image ${{ env.BACKEND_IMAGE_NAME }}:$tag \
            --yes
        done

        az acr repository show-tags \
          --name ${{ env.CONTAINER_REGISTRY_NAME }} \
          --repository ${{ env.FRONTEND_IMAGE_NAME }} \
          --orderby time_desc \
          --output tsv | tail -n +6 | while read tag; do
          az acr repository delete \
            --name ${{ env.CONTAINER_REGISTRY_NAME }} \
            --image ${{ env.FRONTEND_IMAGE_NAME }}:$tag \
            --yes
        done
