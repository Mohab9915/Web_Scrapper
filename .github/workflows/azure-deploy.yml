name: Deploy to Azure Container Apps

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  AZURE_RESOURCE_GROUP: scrapemaster-rg
  AZURE_LOCATION: eastus
  BACKEND_IMAGE_NAME: scrapemaster/backend
  FRONTEND_IMAGE_NAME: scrapemaster/frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'prod' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy infrastructure to Azure
      id: deploy
      run: |
        DEPLOYMENT_NAME="scrapemaster-deployment-$(date +%Y%m%d-%H%M%S)"
        CONTAINER_REGISTRY_NAME="scrapemaster$(date +%s)"

        az deployment group create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file azure-container-apps.bicep \
          --name "$DEPLOYMENT_NAME" \
          --parameters \
            namePrefix=scrapemaster \
            environment=${{ github.event.inputs.environment || 'prod' }} \
            supabaseUrl="${{ secrets.SUPABASE_URL }}" \
            supabaseKey="${{ secrets.SUPABASE_KEY }}" \
            azureOpenAIApiKey="${{ secrets.AZURE_OPENAI_API_KEY }}" \
            azureOpenAIEndpoint="${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
            containerRegistryName="$CONTAINER_REGISTRY_NAME"

        # Get outputs from deployment
        REGISTRY_LOGIN_SERVER=$(az deployment group show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name "$DEPLOYMENT_NAME" \
          --query "properties.outputs.containerRegistryLoginServer.value" \
          --output tsv)

        REGISTRY_NAME=$(az deployment group show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name "$DEPLOYMENT_NAME" \
          --query "properties.outputs.containerRegistryName.value" \
          --output tsv)

        echo "login_server=$REGISTRY_LOGIN_SERVER" >> $GITHUB_OUTPUT
        echo "registry_name=$REGISTRY_NAME" >> $GITHUB_OUTPUT
        echo "deployment_name=$DEPLOYMENT_NAME" >> $GITHUB_OUTPUT

    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ steps.deploy.outputs.registry_name }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: |
          ${{ steps.deploy.outputs.login_server }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          ${{ steps.deploy.outputs.login_server }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        tags: |
          ${{ steps.deploy.outputs.login_server }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          ${{ steps.deploy.outputs.login_server }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update container apps with new images
      run: |
        # Update backend container app
        az containerapp update \
          --name scrapemaster-backend-${{ github.event.inputs.environment || 'prod' }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --image ${{ steps.deploy.outputs.login_server }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}

        # Update frontend container app
        az containerapp update \
          --name scrapemaster-frontend-${{ github.event.inputs.environment || 'prod' }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --image ${{ steps.deploy.outputs.login_server }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}

    - name: Get deployment URLs
      id: urls
      run: |
        # Get URLs from deployment outputs
        BACKEND_URL=$(az deployment group show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ steps.deploy.outputs.deployment_name }} \
          --query "properties.outputs.backendUrl.value" \
          --output tsv)

        FRONTEND_URL=$(az deployment group show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ steps.deploy.outputs.deployment_name }} \
          --query "properties.outputs.frontendUrl.value" \
          --output tsv)

        echo "backend_url=$BACKEND_URL" >> $GITHUB_OUTPUT
        echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT

    - name: Run health checks
      run: |
        echo "Waiting for services to be ready..."
        sleep 60
        
        # Check backend health
        curl -f ${{ steps.urls.outputs.backend_url }}/health || exit 1
        echo "✅ Backend health check passed"
        
        # Check frontend
        curl -f ${{ steps.urls.outputs.frontend_url }} || exit 1
        echo "✅ Frontend health check passed"

    - name: Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment || 'prod' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Application URLs" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend:** ${{ steps.urls.outputs.frontend_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend API:** ${{ steps.urls.outputs.backend_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **API Documentation:** ${{ steps.urls.outputs.backend_url }}/docs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Monitoring" >> $GITHUB_STEP_SUMMARY
        echo "- **Azure Portal:** [View Resources](https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Application Insights:** [View Metrics](https://portal.azure.com/#@/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Insights/components/scrapemaster-insights-${{ github.event.inputs.environment || 'prod' }})" >> $GITHUB_STEP_SUMMARY

  cleanup-old-images:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Cleanup old container images
      run: |
        # Keep only the latest 5 images for each repository
        az acr repository show-tags \
          --name ${{ env.CONTAINER_REGISTRY_NAME }} \
          --repository ${{ env.BACKEND_IMAGE_NAME }} \
          --orderby time_desc \
          --output tsv | tail -n +6 | while read tag; do
          az acr repository delete \
            --name ${{ env.CONTAINER_REGISTRY_NAME }} \
            --image ${{ env.BACKEND_IMAGE_NAME }}:$tag \
            --yes
        done

        az acr repository show-tags \
          --name ${{ env.CONTAINER_REGISTRY_NAME }} \
          --repository ${{ env.FRONTEND_IMAGE_NAME }} \
          --orderby time_desc \
          --output tsv | tail -n +6 | while read tag; do
          az acr repository delete \
            --name ${{ env.CONTAINER_REGISTRY_NAME }} \
            --image ${{ env.FRONTEND_IMAGE_NAME }}:$tag \
            --yes
        done
